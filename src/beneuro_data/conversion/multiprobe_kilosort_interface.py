from copy import deepcopy
from pathlib import Path
from typing import Literal, Optional

import numpy as np
from neuroconv.datainterfaces import KiloSortSortingInterface
from neuroconv.tools.spikeinterface import add_sorting_to_nwbfile
from neuroconv.utils import DeepDict
from pydantic import DirectoryPath
from pynwb import NWBFile


class MultiProbeKiloSortInterface(KiloSortSortingInterface):
    def __init__(
        self,
        # folder_paths: tuple[DirectoryPath, ...],
        folder_path: DirectoryPath,
        keep_good_only: bool = False,
        verbose: bool = True,
    ):
        self.kilosort_folder_paths = list(Path(folder_path).glob("**/sorter_output"))
        self.probe_names = [
            ks_path.parent.name.split("_")[-1] for ks_path in self.kilosort_folder_paths
        ]

        self.kilosort_interfaces = [
            KiloSortSortingInterface(folder_path, keep_good_only, verbose)
            for folder_path in self.kilosort_folder_paths
        ]

        self.folder_path = Path(folder_path)

    def set_aligned_starting_time(self, aligned_starting_time: float):
        for kilosort_interface in self.kilosort_interfaces:
            kilosort_interface.set_aligned_starting_time(aligned_starting_time)

    def add_to_nwbfile(
        self,
        nwbfile: NWBFile,
        metadata: Optional[DeepDict] = None,
    ):
        # Kilosort output will be saved in processing and not units
        # units is reserved for the units curated by Phy
        for probe_name, kilosort_interface, kilosort_folder_path in zip(
            self.probe_names, self.kilosort_interfaces, self.kilosort_folder_paths
        ):
            templates = np.load(kilosort_folder_path / "templates.npy")

            # Copied function from nwb to add templates to nwb
            self.add_one_probe_to_nwbfile(
                sorting_interface=kilosort_interface,
                nwbfile=nwbfile,
                metadata=metadata,
                write_as="processing",
                units_name=f"units_{probe_name}",
                units_description=f"Kilosorted units on {probe_name}",
                waveform_means=templates,
            )

    def get_metadata(self) -> DeepDict:
        return DeepDict()

    @staticmethod
    def add_one_probe_to_nwbfile(
        sorting_interface: KiloSortSortingInterface,
        nwbfile: NWBFile,
        metadata: Optional[DeepDict] = None,
        stub_test: bool = False,
        write_ecephys_metadata: bool = False,
        write_as: Literal["units", "processing"] = "units",
        units_name: str = "units",
        units_description: str = "Autogenerated by neuroconv.",
        waveform_means: Optional[np.ndarray] = None,
    ):
        """
        Primary function for converting the data in a SortingExtractor to NWB format.

        This function is copied from neuroconv and modified to add waveform means (templates)
        to the NWB file.

        Original definition of neuroconv's BaseSortingExtractorInterface.add_to_nwbfile:
        https://github.com/catalystneuro/neuroconv/blob/96c8ed4d76bd734e335acd999c015770f9cfd92a/src/neuroconv/datainterfaces/ecephys/basesortingextractorinterface.py#L282


        Parameters
        ----------
        sorting_interface : KiloSortSortingInterface
            KiloSortSortingInterface for one probe.
        nwbfile :
            Fill the relevant fields within the NWBFile object.
        metadata :
            Information for constructing the NWB file (optional) and units table descriptions.
            Should be of the format::

                metadata["Ecephys"]["UnitProperties"] = dict(name=my_name, description=my_description)
        stub_test :
            If True, will truncate the data to run the conversion faster and take up less memory.
        write_ecephys_metadata :
            Write electrode information contained in the metadata.
        write_as :
            How to save the units table in the nwb file. Options:
            - 'units' will save it to the official NWBFile.Units position; recommended only for the final form of the data.
            - 'processing' will save it to the processing module to serve as a historical provenance for the official table.
        units_name :
            The name of the units table. If write_as=='units', then units_name must also be 'units'.
        units_description :
            Description of where the units in this sorting come from.
        waveform_means :
            Mean waveform (=template) of each unit as recorded from each channel.
            Array of shape (n_units, n_samples, n_channels)
        """

        metadata_copy = deepcopy(metadata)
        if write_ecephys_metadata:
            sorting_interface.add_channel_metadata_to_nwb(
                nwbfile=nwbfile, metadata=metadata_copy
            )

        if stub_test:
            sorting_extractor = sorting_interface.subset_sorting()
        else:
            sorting_extractor = sorting_interface.sorting_extractor

        property_descriptions = dict()
        for metadata_column in metadata_copy["Ecephys"].get("UnitProperties", []):
            property_descriptions.update(
                {metadata_column["name"]: metadata_column["description"]}
            )
            for unit_id in sorting_extractor.get_unit_ids():
                # Special condition for wrapping electrode group pointers to actual object ids rather than string names
                if (
                    metadata_column["name"] == "electrode_group"
                    and nwbfile.electrode_groups
                ):
                    value = nwbfile.electrode_groups[
                        sorting_interface.sorting_extractor.get_unit_property(
                            unit_id=unit_id, property_name="electrode_group"
                        )
                    ]
                    sorting_extractor.set_unit_property(
                        unit_id=unit_id,
                        property_name=metadata_column["name"],
                        value=value,
                    )

        add_sorting_to_nwbfile(
            sorting_extractor,
            nwbfile=nwbfile,
            property_descriptions=property_descriptions,
            write_as=write_as,
            units_name=units_name,
            units_description=units_description,
            waveform_means=waveform_means,
        )
